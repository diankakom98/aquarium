#include <iostream> 
#include <sstream>
#include <SFML/Graphics.hpp>


using namespace sf;

////////////КЛАСС СУЩНОСТЬ///////////
class Entity {
public:
         enum { right, left, up, down} state; //тип перечеисление - состояния объекта
         float dx, dy, x, y, speed, moveTimer;//добавили переменную таймер для будущих целей
         int a, b health; // переменная, хранящая жизни игрока
         bool life; //логический тип, переменнвя "жизнь"
         Texture texture; //СФМЛ структура
         sprite sprite; // СФМЛ спрайт
         float CurrentFrame;//хранение текущего кадра
        
        
         Entity(Image &image, float X, float Y, int W, int H, std::string Name) {
		     x = X; y = Y; //координата появления спрайта
		     a = A;  b= B;
		     name = Name;
		     moveTimer = 0;
		     dx = 0; dy = 0;
		     speed = 0;
         
         
         CurrentFrame = 0;
		     health = 100;
		     life = true; //герой жив
		     texture.loadFromImage(image); //заносим изображение в текстуру
		     sprite.setTexture(texture); //заливаем спрайт текстурой
   }
   
     FloatRect getRect() {//получим прямоугольник,его координаты, его размеры (ширина,высота).
		 FloatRect FR(x, y, a, b); // переменная FR типа FloatRect
		 return FR;
   }
   
   virtual void update(float time) = 0;
   
};


///////////////////КЛАСС ИГРОК////////////////////


class Gamer :public Entity {
public:


          Player(Image &image, float X, float Y, int A, int B, std::string Name) :Entity(image, X, Y, A, B, Name) {
		      state = stay;
		      if (name == "Player1") {
			    //Задаем спрайту один прямоугольник для
			    //вывода одного игрока. IntRect – для приведения типов
			    sprite.setTextureRect(IntRect(0, 0, a, b));
			    //sprite.setOrigin(a/2, b/2);
          }
}

    void control() {
          if (Keyboard::isKeyPressed(Keyboard::Left)) {
			          state = left;
			          speed = 0.1;
		      }

		      if (Keyboard::isKeyPressed(Keyboard::Right)) {
			          state = right;
			          speed = 0.1;
		      }

		      if (Keyboard::isKeyPressed(Keyboard::Up)) {
			          state = up;
			          speed = 0.1;
		      }

		      if (Keyboard::isKeyPressed(Keyboard::Down)) {
			          state = down;
			          speed = 0.1;
		      }
	}
  
  
  void update(float time) //оживление объекта класса.
  {
          if (life) {//проверяем, жив ли герой
			    control();//функция управления героем
			    switch (state)//делаются необходимые действия в зависимости от состояния
			    {
			    case right: {//состояние идти вправо
                dx = speed; dy = 0;
				        CurrentFrame += 0.005*time;
				        if (CurrentFrame > 3) CurrentFrame -= 3;
				        sprite.setTextureRect(IntRect(245, 6, 64, 64));
				        break;
          }
          case left: {//состояние идти влево
                dx = -speed; dy = 0;
				        CurrentFrame += 0.005*time;
				        if (CurrentFrame > 3) CurrentFrame -= 3;
				        sprite.setTextureRect(IntRect(91, 7, 64, 64));
				        break;
          }
          case down: {//идти вниз
                dy = speed; dx = 0;
				        CurrentFrame += 0.005*time;
				        if (CurrentFrame > 3) CurrentFrame -= 3;
				        sprite.setTextureRect(IntRect(167, 7, 64, 64));
				        break;
          }
          case up: {//идти вверх
                dy = -speed; dx = 0;
				        CurrentFrame += 0.005*time;
				        if (CurrentFrame > 3) CurrentFrame -= 3;
				        sprite.setTextureRect(IntRect(7, 7, 64, 64));
				        break;
          }
          case stay: {//стоим
                dy = speed;
				        dx = speed;
				        break;
          }
          }
       }
     }
  };
  
  ////////////КЛАСС ВРАГА////////////
class Enemy :public Entity {
public:
         int direction;//направление движения врага
	       Enemy(Image &image, float X, float Y, int A, int B, std::string Name) :Entity(image, X, Y, A, B, Name) {
             if (name == "EasyEnemy") {
                  sprite.setTextureRect(IntRect(0, 0, a, b));
			            direction = rand() % (4);//Направление движения врага задаём случайным образом
                  
                  speed = 0.1;//даем скорость врагу, он всегда двигается
			            dx = speed;
            }
         }
         }
         
         void update(float time)
         {
              if (name == "EasyEnemy") {
              
                  if (life) {//проверяем, жив ли герой
                      switch (direction)//делаются различные действия в зависимости от состояния
                      {
                      case 0: {//состояние идти вправо
                          dx = speed; dy = 0;
					                CurrentFrame += 0.005*time;
					                if (CurrentFrame > 3) CurrentFrame -= 3;
					                sprite.setTextureRect(IntRect(245, 70, 64, -64));
					                break;
                      }
                      case 1: {//состояние идти влево
                          dx = -speed; dy = 0;
					                CurrentFrame += 0.005*time;
					                if (CurrentFrame > 3) CurrentFrame -= 3;
                          sprite.setTextureRect(IntRect(86, 71, 64, -64));
					                break;
                      }
                      case 2: {//идти вверх
                          dy = -speed; dx = 0;
					                CurrentFrame += 0.005*time;
					                if (CurrentFrame > 3) CurrentFrame -= 3;
                          sprite.setTextureRect(IntRect(167, 76, 64, -64));
					                break;
                      }
                      case 3: {//идти вниз
                          dy = speed; dx = 0;
					                CurrentFrame += 0.005*time;
					                if (CurrentFrame > 3) CurrentFrame -= 3;
                          sprite.setTextureRect(IntRect(7, 71, 64, -64));
					                break;
                      }
                      }
                      
                  }
              }
        }
};//класс Enemy закрыт

                     
           
int main()
{
        sf::VideoMode desktop = sf::VideoMode::getDesktopMode();
	      sf::RenderWindow window(sf::VideoMode(1280, 800, desktop.bitsPerPixel), "Aquarium");
        
        
        Image map_image;//объект изображения для карты
	      map_image.loadFromFile("map.png");//загружаем файл для карты
        Texture map;//текстура карты
       	map.loadFromImage(map_image);//заряжаем текстуру картинкой
	      Sprite s_map;//создаём спрайт для карты
	      s_map.setTexture(map);//заливаем текстуру спрайтом
        
        
        Clock clock;
	      Clock gameTimeClock;//переменная игрового времени, будем здесь хранить время игры 
	      int gameTime = 0;//объявили игровое время, инициализировали.
        
        
        Image heroImage;
      	heroImage.loadFromFile("images/hero.png"); // загружаем изображение игрока
        
        Image easyEnemyImage;
	      easyEnemyImage.loadFromFile("enemy(1).png"); // загружаем изображение врага
        
        Image BulletImage;//изображение для пули
	      BulletImage.loadFromFile("korm.png");//загрузили картинку в объект изображения
        
        Player p(heroImage, 100, 100, 96, 96, "Player1");//объект класса игрока
        
        std::list<Entity*>  enemies; //список врагов
	      std::list<Entity*>  Bullets; //список корма
	      std::list<Entity*>::iterator it; //итератор чтобы проходить по элементам списка
        
        const int ENEMY_COUNT = 3;	//максимальное количество врагов в игре
	      int enemiesCount = 0;	//текущее количество врагов в игре
        
        for (int i = 0; i < ENEMY_COUNT; i++)
	      {
        
              float xr = 150 + rand() % 500; // случайная координата врага на поле игры по оси “x”
		          float yr = 150 + rand() % 350; // случайная координата врага на поле игры по оси “y”
              
              enemies.push_back(new Enemy(easyEnemyImage, xr, yr, 96, 96, "EasyEnemy"));
		          enemiesCount += 1; //увеличили счётчик врагов
        }
        
        while (window.isOpen())
	      {
        
              float time = clock.getElapsedTime().asMicroseconds();
              
              
              if (p.life) gameTime = gameTimeClock.getElapsedTime().asSeconds();//игровое время
              
              clock.restart();
		          time = time / 800;
              
              
              createObjectForMapTimer += time;//наращиваем таймер
              
              sf::Event event;
		          while (window.pollEvent(event))
              {
                    if (event.type == sf::Event::Closed)
                        window.close();
              
	      p.update(time); //оживляем объект “p” класса “Player” 
              
	      
	                                           //оживляем врагов
	      for (it = enemies.begin(); it != enemies.end(); it++)
		{
			(*it)->update(time); //запускаем метод update()
		}
		
		window.clear();


                window.draw(p.sprite);//рисуем спрайт объекта “p” класса “Player”
		   
		                                            //рисуем врагов
		for (it = enemies.begin(); it != enemies.end(); it++)
		{
			if ((*it)->life) //если враги живы
				window.draw((*it)->sprite); //рисуем 
		}
                
		
       return 0;
  }
	      





                        
                        
                        
                        
                        
                        
                        
                  
                  
                  
                  
                  
                  
                  
                  
                  
                  
